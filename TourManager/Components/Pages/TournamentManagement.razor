@page "/TournamentManagement"

@using TourManager.Data
@using Microsoft.Maui.Storage
@using System.IO
@using System.Text.Json
@inject StateContainer StateContainer
@inject IJSRuntime JSRuntime

<h1 class="mt-6">Tournament Management</h1>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <div class="input-group mb-3">
                <!-- Input creating a new tournament -->
                <input type="text" class="form-control" @bind="TournamentName" placeholder="Tournament" />
                <input type="text" class="form-control" @bind="Organizer" placeholder="Organizer" />
            </div>
            <div class="input-group mb-3">
                <!-- Button to create -->
                <button class="btn btn-primary" type="button" @onclick="Create">New Tournament</button>
                <!-- Buttons to manage -->
                <button class="btn btn-primary" @onclick="Save">Save</button>
                <button class="btn btn-primary" @onclick="Load">Load</button>
            <br />
            </div>
            <div>
                <p role="status">@statusMessage</p>
            </div>
        </div>
    </div>
</div>

<h1 class="mt-6">Particpants</h1>

<p>Current Tournament: <b>@StateContainer.currentTournament.Name</b></p>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <div class="input-group mb-3">
                <!-- Input field for adding new player -->
                <input type="text" class="form-control" @bind="newPlayerfirstname" placeholder="First Name" />
                <input type="text" class="form-control" @bind="newPlayerlastname" placeholder="Last Name" />
                <!-- Button to add new player -->
                <button class="btn btn-primary" type="button" @onclick="AddPlayer">Register New Player</button>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <h2>Registered</h2>
            <!-- Display players -->
            @foreach (var Player in StateContainer.currentTournament.PlayerList)
            {
                <div class="row">
                    <div class="col-md-6">
                        <!-- Label for displaying player name -->
                        <label class="form-check-label">@Player.Name</label>
                    </div>
                    <div class="col">
                        <!-- Button for editing players -->
                        <button class="btn btn-danger btn-sm ms-2" @onclick="() => EditPlayer(Player)">Edit</button>
                        <!-- Button for deleting players -->
                        <button class="btn btn-danger btn-sm ms-2" @onclick="() => RemovePlayer(StateContainer.currentTournament.PlayerList, Player)">Remove</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@code {
    //new tournament info
    public string TournamentName;
    public string Organizer;
    public string Date;
    // String variables to store the first and last name of the new player
    private string newPlayerfirstname = "";
    private string newPlayerlastname = "";
    //error message
    private string errorMessage = "Entry cannot contain special characters";
    //statuses
    private string statusMessage = "";
    //database connection
    private DatabaseConnection tournamentDatabase = new DatabaseConnection();
    private DBmatch matchDatabase = new DBmatch();
    private DBplayer playerDatabase = new DBplayer();

    //Check for special characters
    private bool HasSpecialChars(string String)
    {
        char[] SpecialChars = { '!', '@', '#', '$', '%', '^', '&', '*' }; //list of unexpected char
        return SpecialChars.Any(ch => String.Contains(ch));
    }
    //new function
    private async void Create()
    {
        // Check if the input field is not empty
        try
        {
            if (!string.IsNullOrWhiteSpace(TournamentName))
            {
                if (HasSpecialChars(TournamentName) == false)
                {
                    // Create a new tournament with the input text
                    // Save tournament to state container
                    StateContainer.currentTournament = new Tournament(TournamentName, Organizer);
                    TournamentName = ""; // Clear the input field after adding the player list
                    Organizer = "";
                    Date = DateTime.Today.ToString("yyyyMMdd");
                    statusMessage = "Tournament Created";
                }
                else
                {
                    throw new SpecialCharException("Items cannot contain special characters (@ # $ %)");
                }
            }
        }
        catch (SpecialCharException e) //catch the exception
        {
            errorMessage = e.Message;
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {errorMessage}."); //create dialog box
        }
    }
    // Function to add new player
    private async void AddPlayer()
    {
        if (StateContainer.currentTournament.Name != "none")
        {
            // Check if the input field is not empty
            try
            {
                if (!string.IsNullOrWhiteSpace(newPlayerfirstname))
                {
                    if (HasSpecialChars(newPlayerfirstname) == false)
                    {
                        // Create a new player with the input text and add it to the list
                        StateContainer.currentTournament.PlayerList.Add(new Player(newPlayerfirstname, newPlayerlastname));
                        newPlayerfirstname = ""; // Clear the input field after adding the player list
                        newPlayerlastname = "";
                    }
                    else
                    {
                        throw new SpecialCharException("Items cannot contain special characters (@ # $ %)");
                    }
                }
            }
            catch (SpecialCharException e) //catch the exception
            {
                errorMessage = e.Message;
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {errorMessage}."); //create dialog box
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please create a new tournament");
        }
    }
    private async void EditPlayer(Player player)
    {
        string newFirst = await JSRuntime.InvokeAsync<string>("prompt","Enter First Name:",$"{player.FirstName}");
        string newLast = await JSRuntime.InvokeAsync<string>("prompt", "Enter First Name:", $"{player.LastName}");
        player.FirstName = newFirst;
        player.LastName = newLast; 
    }
    private async void RemovePlayer(List<Player> playerlist, Player player)
    {
        // confirmation message
        bool confirmation = await JSRuntime.InvokeAsync<bool>("confirm", $"Remove {player.Name}?");
        if (confirmation == true)
        {
            // Remove the player from list
            playerlist.Remove(player);
        }
    }
    private async Task Save()
    {
        tournamentDatabase.Save(StateContainer.currentTournament.Name, StateContainer.currentTournament.Organizer, StateContainer.currentTournament.Date);
        foreach (Player player in StateContainer.currentTournament.PlayerList)
        {
            playerDatabase.Save(player.PlayerID, player.FirstName, player.LastName, player.Wins, player.Draws, player.Losses, player.Score);
        }
        foreach (Round round in StateContainer.currentTournament.RoundList)
        {
            foreach (Match match in round.Matches)
            {
                matchDatabase.Save(match.Player1.PlayerID, match.Player2.PlayerID, match.Round, match.Table, match.Result);
            }
        }
        statusMessage = "Tournament Saved";
    }
    private void Load()
    {
        Tournament newTournament = tournamentDatabase.Load();
        List<Player> newPlayerlist = playerDatabase.Load();
        foreach (Player player in newPlayerlist)
        {
            newTournament.PlayerList.Add(player);
        }
        statusMessage = "Tournament Loaded";
    }
}