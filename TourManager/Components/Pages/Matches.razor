@page "/matches"

@using TourManager.Data
@using TourManager.Exceptions
@using Microsoft.Maui.Storage
@using System.IO
@using System.Text.Json
@inject StateContainer StateContainer
@inject IJSRuntime JSRuntime

<h1>Matches</h1>
<h2>Round #</h2>

<!-- Round Overview and Creation -->
<div class="row">
    <div class="col-md-3">
        <label style="font-weight: bold;">Current Round: @StateContainer.currentTournament.CurrentRound</label>
    </div>
</div>
<div class="col-md-2">
    <button class="btn btn-primary" type="button" @onclick="NewRound">New Round</button>
</div>
<br/>

<!-- Get Round -->
<div class="row">
    <div class="col-md-2">
        <label for="round" style="font-weight: bold;">Enter Round Number</label>
    </div>
    <div class="col">
        <select name="round" id="round" @bind="@RoundNumber" class="dropdown-center">
            <!-- Set Range -->
            @for (int i = 1; i <= StateContainer.currentTournament.CurrentRound; i++)
            {
                <option>@i</option>
            }
        </select>
    </div>
</div>
<!-- Get Button -->
<div class="col-md-2">
    <button @onclick="GetRound" class="btn btn-outline-primary">Find Matches</button>
</div>
<br />

<!-- Show matches -->
<div class="container">
    <div class="row">
            <!-- Need Heading and format as a table -->
            <div class="col">
                <!-- Label for which table they are playing at -->
                <label>Table</label>
            </div>
            <div class="col">
                <!-- Label for player 1 -->
                <label>Player 1</label>
            </div>
            <div class="col">
                            <!-- Label for vs -->
            <label>vs</label>
            </div>
            <div class="col">
                            <!-- Label for player 2 -->
                <label>Player 2</label>
            </div>
            <div class="col-md-6">
                <label>Report</label>
            </div>
    </div>
    <!-- Display players -->
    @foreach (var Match in RoundSelected.Matches)
    {
        <div class="row">
            <div class="col">
                <!-- Label for displaying table number -->
                <label>@Match.Table</label>
            </div>
            <div class="col">
                <!-- Label for displaying player 1 -->
                <label>@Match.Player1.Name</label>
            </div>
            <div class="col">
                <!-- hold for vs -->
                <label class="form-check-label">vs</label>
            </div>
            <div class="col">
                <!-- Label for displaying player 2 -->
                <label>@Match.Player2.Name</label>
            </div>
            @if (Match.Reported == false)
                {
                    <!-- Check for a bye -->
                    @if (Match.Player1.LastName == "bye")
                    {
                        <div class="col-md-6">
                            <button @onclick="() => Report(Match, P2)" class="btn btn-outline-success">@Match.Player2.FirstName gets a bye</button>
                        </div>
                    }
                    @if (Match.Player2.LastName == "bye")
                    {
                        <div class="col-md-6">
                            <button @onclick="() => Report(Match, P1)" class="btn btn-outline-success">@Match.Player1.FirstName gets a bye</button>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-6">
                            <button @onclick="() => Report(Match, P1)" class="btn btn-outline-success">@Match.Player1.FirstName win</button>
                            <button @onclick="() => Report(Match, P2)" class="btn btn-outline-success">@Match.Player2.FirstName win</button>
                            <button @onclick="() => Report(Match, Draw)" class="btn btn-outline-success">Draw</button>
                        </div>
                    }
                }
            else
                {
                    <div class="col-md-6">
                        <p>Results Entered</p>
                    </div>
                }
        </div>
    }
</div>

@code {
    //variables
    public string P1 = "P1";
    public string P2 = "P2";
    public string Draw = "Draw";
    public int RoundNumber;
    public Round RoundSelected = new Round(0); 
    //methods
    public async void GetRound()
    {
        try
        {
            if (StateContainer.currentTournament.RoundList[RoundNumber - 1].Matches.Any())
            {
                RoundSelected = StateContainer.currentTournament.RoundList[RoundNumber - 1];
            }
            else
                throw new NoMatchesException("No matches could be created");

        }
        catch (Exception e)
        {
            string errorMessage = "No matches found";
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {errorMessage}."); //create dialog box
        }
    }
    public async void Report(Match match, string winner)
    {
        match.EnterResult(winner);
    }
    //start new round
    //create round counter
    private async Task NewRound()
    {
        if (StateContainer.currentTournament.PlayerList.Any())
        {
            StateContainer.currentTournament.NewRound();
            RoundNumber = StateContainer.currentTournament.CurrentRound;
            GetRound();
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("No Players", "No Players are registered", "OK");
        }
    }
}
