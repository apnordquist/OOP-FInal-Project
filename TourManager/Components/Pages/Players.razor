@page "/players"
@using TourManager.Data
@inject IJSRuntime JSRuntime

<h1 class="mt-6">Particpants</h1>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <div class="input-group mb-3">
                <!-- Input field for adding new player -->
                <input type="text" class="form-control" @bind="newPlayerfirstname" placeholder="First Name" />
                <input type="text" class="form-control" @bind="newPlayerlastname" placeholder="Last Name" />
                <!-- Button to add new player -->
                <button class="btn btn-primary" type="button" @onclick="AddPlayer">Register New Player</button>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <h2>Registered</h2>
            <!-- Display todo items -->
            @foreach (var Player in PlayerList)
            {
                <div class="form-check">
                    <!-- Label for displaying player name -->
                    <label class="form-check-label">@Player.Name</label>
                    <!-- Button for editing players -->
                    <button class="btn btn-danger btn-sm ms-2" @onclick="() => EditPlayer(Player, newPlayerfirstname, newPlayerlastname)">Edit</button>
                    <!-- Button for deleting players -->
                    <button class="btn btn-danger btn-sm ms-2" @onclick="() => RemovePlayer(PlayerList, Player)">Remove</button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    // String variables to store the first and last name of the new player
    private string newPlayerfirstname = "";
    private string newPlayerlastname = "";
    // List to store player
    private List<Player> PlayerList = new List<Player>();
    //list for saved or deleted players
    private List<Player> SavedPlayers = new List<Player>();
    //string to contain error massage
    private string errorMessage = "Item added";
    //private bool errorFound = false;

    //Check for special characters
    private bool HasSpecialChars(string String)
    {
        char[] SpecialChars = { '!', '@', '#', '$', '%', '^', '&', '*' }; //list of unexpected char
        return SpecialChars.Any(ch => String.Contains(ch));
    }
    // Function to add new player
    private async void AddPlayer()
    {
        // Check if the input field is not empty
        try
        {
            if (!string.IsNullOrWhiteSpace(newPlayerfirstname))
            {
                if (HasSpecialChars(newPlayerfirstname) == false)
                {
                    // Create a new player with the input text and add it to the list
                    PlayerList.Add(new Player(newPlayerfirstname,newPlayerlastname));
                    newPlayerfirstname = ""; // Clear the input field after adding the player list
                    newPlayerlastname = "";
                }
                else
                {
                    throw new SpecialCharException("Items cannot contain special characters (@ # $ %)");
                }
            }
        }
        catch (SpecialCharException e) //catch the exception
        {
            errorMessage = e.Message;
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {errorMessage}."); //create dialog box
        }
    }
    private async void EditPlayer(Player player, string newfirstname, string newlastname)
    {
        {
            // update first and last name
            player.FirstName = newfirstname;
            player.LastName = newlastname;
            //need to change to new dialog box
        }
    }
    private async void RemovePlayer(List<Player> playerlist, Player player)
    {
        {
            // need to add confirmation message
            // Remove the player from list
            playerlist.Remove(player);
            // Add player to a saved list for future use or records
            SavedPlayers.Add(player);
        }
    }
}
